// Generated by gencpp from file movement/gpvtg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_GPVTG_H
#define MOVEMENT_MESSAGE_GPVTG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace movement
{
template <class ContainerAllocator>
struct gpvtg_
{
  typedef gpvtg_<ContainerAllocator> Type;

  gpvtg_()
    : track()
    , speedkm()  {
    }
  gpvtg_(const ContainerAllocator& _alloc)
    : track(_alloc)
    , speedkm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _track_type;
  _track_type track;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _speedkm_type;
  _speedkm_type speedkm;





  typedef boost::shared_ptr< ::movement::gpvtg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::gpvtg_<ContainerAllocator> const> ConstPtr;

}; // struct gpvtg_

typedef ::movement::gpvtg_<std::allocator<void> > gpvtg;

typedef boost::shared_ptr< ::movement::gpvtg > gpvtgPtr;
typedef boost::shared_ptr< ::movement::gpvtg const> gpvtgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::gpvtg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::gpvtg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement::gpvtg_<ContainerAllocator1> & lhs, const ::movement::gpvtg_<ContainerAllocator2> & rhs)
{
  return lhs.track == rhs.track &&
    lhs.speedkm == rhs.speedkm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement::gpvtg_<ContainerAllocator1> & lhs, const ::movement::gpvtg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement::gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::gpvtg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::gpvtg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::gpvtg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::gpvtg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "637f5b710e0df4c3f674b10916974d40";
  }

  static const char* value(const ::movement::gpvtg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x637f5b710e0df4c3ULL;
  static const uint64_t static_value2 = 0xf674b10916974d40ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/gpvtg";
  }

  static const char* value(const ::movement::gpvtg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 track\n"
"std_msgs/Float32 speedkm\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::movement::gpvtg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::gpvtg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track);
      stream.next(m.speedkm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpvtg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::gpvtg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::gpvtg_<ContainerAllocator>& v)
  {
    s << indent << "track: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.track);
    s << indent << "speedkm: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.speedkm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_GPVTG_H
