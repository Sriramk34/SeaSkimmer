// Generated by gencpp from file movement/accgyro.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_ACCGYRO_H
#define MOVEMENT_MESSAGE_ACCGYRO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace movement
{
template <class ContainerAllocator>
struct accgyro_
{
  typedef accgyro_<ContainerAllocator> Type;

  accgyro_()
    : accx()
    , accy()
    , accz()
    , gyrox()
    , gyroy()
    , gyroz()  {
    }
  accgyro_(const ContainerAllocator& _alloc)
    : accx(_alloc)
    , accy(_alloc)
    , accz(_alloc)
    , gyrox(_alloc)
    , gyroy(_alloc)
    , gyroz(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _accx_type;
  _accx_type accx;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _accy_type;
  _accy_type accy;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _accz_type;
  _accz_type accz;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _gyrox_type;
  _gyrox_type gyrox;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _gyroy_type;
  _gyroy_type gyroy;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _gyroz_type;
  _gyroz_type gyroz;





  typedef boost::shared_ptr< ::movement::accgyro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::accgyro_<ContainerAllocator> const> ConstPtr;

}; // struct accgyro_

typedef ::movement::accgyro_<std::allocator<void> > accgyro;

typedef boost::shared_ptr< ::movement::accgyro > accgyroPtr;
typedef boost::shared_ptr< ::movement::accgyro const> accgyroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::accgyro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::accgyro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement::accgyro_<ContainerAllocator1> & lhs, const ::movement::accgyro_<ContainerAllocator2> & rhs)
{
  return lhs.accx == rhs.accx &&
    lhs.accy == rhs.accy &&
    lhs.accz == rhs.accz &&
    lhs.gyrox == rhs.gyrox &&
    lhs.gyroy == rhs.gyroy &&
    lhs.gyroz == rhs.gyroz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement::accgyro_<ContainerAllocator1> & lhs, const ::movement::accgyro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement::accgyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::accgyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::accgyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::accgyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::accgyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::accgyro_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::accgyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38ea6143b493167fb723479a442558f8";
  }

  static const char* value(const ::movement::accgyro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38ea6143b493167fULL;
  static const uint64_t static_value2 = 0xb723479a442558f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::accgyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/accgyro";
  }

  static const char* value(const ::movement::accgyro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::accgyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 accx\n"
"std_msgs/Float32 accy\n"
"std_msgs/Float32 accz\n"
"std_msgs/Float32 gyrox\n"
"std_msgs/Float32 gyroy\n"
"std_msgs/Float32 gyroz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::movement::accgyro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::accgyro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accx);
      stream.next(m.accy);
      stream.next(m.accz);
      stream.next(m.gyrox);
      stream.next(m.gyroy);
      stream.next(m.gyroz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct accgyro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::accgyro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::accgyro_<ContainerAllocator>& v)
  {
    s << indent << "accx: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.accx);
    s << indent << "accy: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.accy);
    s << indent << "accz: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.accz);
    s << indent << "gyrox: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.gyrox);
    s << indent << "gyroy: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.gyroy);
    s << indent << "gyroz: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.gyroz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_ACCGYRO_H
