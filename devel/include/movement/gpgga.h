// Generated by gencpp from file movement/gpgga.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_GPGGA_H
#define MOVEMENT_MESSAGE_GPGGA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace movement
{
template <class ContainerAllocator>
struct gpgga_
{
  typedef gpgga_<ContainerAllocator> Type;

  gpgga_()
    : lat()
    , long()
    , hdop()  {
    }
  gpgga_(const ContainerAllocator& _alloc)
    : lat(_alloc)
    , long(_alloc)
    , hdop(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _lat_type;
  _lat_type lat;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _long_type;
  _long_type long;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _hdop_type;
  _hdop_type hdop;





  typedef boost::shared_ptr< ::movement::gpgga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::gpgga_<ContainerAllocator> const> ConstPtr;

}; // struct gpgga_

typedef ::movement::gpgga_<std::allocator<void> > gpgga;

typedef boost::shared_ptr< ::movement::gpgga > gpggaPtr;
typedef boost::shared_ptr< ::movement::gpgga const> gpggaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::gpgga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::gpgga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement::gpgga_<ContainerAllocator1> & lhs, const ::movement::gpgga_<ContainerAllocator2> & rhs)
{
  return lhs.lat == rhs.lat &&
    lhs.long == rhs.long &&
    lhs.hdop == rhs.hdop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement::gpgga_<ContainerAllocator1> & lhs, const ::movement::gpgga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement::gpgga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::gpgga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::gpgga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::gpgga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::gpgga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::gpgga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fd45415d072c0bab0541d1fae62c5cc";
  }

  static const char* value(const ::movement::gpgga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fd45415d072c0baULL;
  static const uint64_t static_value2 = 0xb0541d1fae62c5ccULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/gpgga";
  }

  static const char* value(const ::movement::gpgga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 lat\n"
"std_msgs/Float32 long\n"
"std_msgs/Float32 hdop\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::movement::gpgga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::gpgga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.long);
      stream.next(m.hdop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpgga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::gpgga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::gpgga_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.lat);
    s << indent << "long: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.long);
    s << indent << "hdop: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.hdop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_GPGGA_H
